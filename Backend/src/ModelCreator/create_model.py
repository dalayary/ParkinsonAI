# -*- coding: utf-8 -*-
"""ModelBuilderMLP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/
"""
# remove comments when running in colab
# from google.colab import files
# uploaded = files.upload()

# !pip install praat-parselmouth
# !pip install numpy
# !pip install pandas
# !pip install sklearn
# !pip install joblib
# !pip install tensorflow
# !pip install keras

import warnings

warnings.filterwarnings('ignore')
import joblib
import pandas as pd
import numpy as np
import parselmouth
from parselmouth.praat import call
import glob
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split

##MLPClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import classification_report

data = pd.read_csv("dataset.csv")
data.head()

data['hnr25'].fillna((data['hnr25'].mean()), inplace=True)
data['hnr15'].fillna((data['hnr15'].mean()), inplace=True)
data.head()

# Load independent DataSet
Fs = data.iloc[:, 1:13]

# Load dependent target column i.e Parkinson
target = data.iloc[:, 0]

from sklearn.model_selection import train_test_split
from keras.utils import to_categorical
from tensorflow.keras.utils import to_categorical

# Reshape and Split data to Train data and Test data
arrayofdata_ = np.array(Fs)
labels = np.array(target)

one_hot_labels = to_categorical(labels, num_classes=2)

x_train, x_test, y_train, y_test = train_test_split(arrayofdata_,
                                                    one_hot_labels,
                                                    test_size=0.20, shuffle=True,
                                                    random_state=84)

x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))
x_test = np.reshape(x_test, (x_test.shape[0], x_train.shape[1], 1))

# Reshape Data for Confusion_matrix
x_train1 = np.reshape(x_train, (x_train.shape[0], x_train.shape[1] * x_train.shape[2]))
x_test1 = np.reshape(x_test, (x_test.shape[0], x_test.shape[1] * x_test.shape[2]))
y_train1 = np.argmax(y_train, axis=1)
y_test1 = np.argmax(y_test, axis=1)

from sklearn.neural_network import MLPClassifier

my_tags = ['HC', 'PD']
MLP = MLPClassifier(solver='adam', alpha=1e-5, hidden_layer_sizes=(150, 150, 150), random_state=1).fit(x_train1,
                                                                                                       y_train1)

# y_pred_mlp=MLP.predict(x_test1)
# print('MLP accuracy is %s' % accuracy_score(y_pred_mlp, y_test1))
# print(classification_report(y_test1, y_pred_mlp,target_names=my_tags))

MLP.fit(x_train1, y_train1)


def measurePitch(voiceID, f0min, f0max, unit):
    sound = parselmouth.Sound(voiceID)  # read the sound
    pitch = call(sound, "To Pitch", 0.0, f0min, f0max)
    pointProcess = call(sound, "To PointProcess (periodic, cc)", f0min, f0max)  # create a praat pitch object
    localJitter = call(pointProcess, "Get jitter (local)", 0, 0, 0.0001, 0.02, 1.3)
    localabsoluteJitter = call(pointProcess, "Get jitter (local, absolute)", 0, 0, 0.0001, 0.02, 1.3)
    rapJitter = call(pointProcess, "Get jitter (rap)", 0, 0, 0.0001, 0.02, 1.3)
    ppq5Jitter = call(pointProcess, "Get jitter (ppq5)", 0, 0, 0.0001, 0.02, 1.3)
    localShimmer = call([sound, pointProcess], "Get shimmer (local)", 0, 0, 0.0001, 0.02, 1.3, 1.6)
    localdbShimmer = call([sound, pointProcess], "Get shimmer (local_dB)", 0, 0, 0.0001, 0.02, 1.3, 1.6)
    apq3Shimmer = call([sound, pointProcess], "Get shimmer (apq3)", 0, 0, 0.0001, 0.02, 1.3, 1.6)
    aqpq5Shimmer = call([sound, pointProcess], "Get shimmer (apq5)", 0, 0, 0.0001, 0.02, 1.3, 1.6)
    apq11Shimmer = call([sound, pointProcess], "Get shimmer (apq11)", 0, 0, 0.0001, 0.02, 1.3, 1.6)
    harmonicity05 = call(sound, "To Harmonicity (cc)", 0.01, 500, 0.1, 1.0)
    hnr05 = call(harmonicity05, "Get mean", 0, 0)
    harmonicity15 = call(sound, "To Harmonicity (cc)", 0.01, 1500, 0.1, 1.0)
    hnr15 = call(harmonicity15, "Get mean", 0, 0)
    harmonicity25 = call(sound, "To Harmonicity (cc)", 0.01, 2500, 0.1, 1.0)
    hnr25 = call(harmonicity25, "Get mean", 0, 0)
    harmonicity35 = call(sound, "To Harmonicity (cc)", 0.01, 3500, 0.1, 1.0)
    hnr35 = call(harmonicity35, "Get mean", 0, 0)
    harmonicity38 = call(sound, "To Harmonicity (cc)", 0.01, 3800, 0.1, 1.0)
    hnr38 = call(harmonicity38, "Get mean", 0, 0)
    return localJitter, localabsoluteJitter, rapJitter, ppq5Jitter, localShimmer, localdbShimmer, apq3Shimmer, aqpq5Shimmer, apq11Shimmer, hnr05, hnr15, hnr25, hnr35, hnr38


file_list = []
localJitter_list = []
localabsoluteJitter_list = []
rapJitter_list = []
ppq5Jitter_list = []
localShimmer_list = []
localdbShimmer_list = []
apq3Shimmer_list = []
aqpq5Shimmer_list = []
apq11Shimmer_list = []
hnr05_list = []
hnr15_list = []
hnr25_list = []
hnr35_list = []
hnr38_list = []
parkinson_list = []

sound = parselmouth.Sound("/content/ID35_hc_0_0_0.wav")
(localJitter, localabsoluteJitter, rapJitter, ppq5Jitter, localShimmer, localdbShimmer, apq3Shimmer, aqpq5Shimmer,
 apq11Shimmer, hnr05, hnr15, hnr25, hnr35, hnr38) = measurePitch(sound, 75, 1000, "Hertz")
localJitter_list.append(localJitter)  # make a mean F0 list
localabsoluteJitter_list.append(localabsoluteJitter)  # make a sd F0 list
rapJitter_list.append(rapJitter)
ppq5Jitter_list.append(ppq5Jitter)
localShimmer_list.append(localShimmer)
localdbShimmer_list.append(localdbShimmer)
apq3Shimmer_list.append(apq3Shimmer)
aqpq5Shimmer_list.append(aqpq5Shimmer)
apq11Shimmer_list.append(apq11Shimmer)
hnr05_list.append(hnr05)
hnr15_list.append(hnr15)
hnr25_list.append(hnr25)
hnr35_list.append(hnr35)
hnr38_list.append(hnr38)

apred = pd.DataFrame(np.column_stack(
    [localJitter_list, localabsoluteJitter_list, rapJitter_list, ppq5Jitter_list, localShimmer_list,
     localdbShimmer_list, apq3Shimmer_list, aqpq5Shimmer_list, apq11Shimmer_list, hnr05_list, hnr15_list, hnr25_list]),
                     columns=["Jitter_rel", "Jitter_abs", "Jitter_RAP", "Jitter_PPQ", "Shim_loc", "Shim_dB",
                              "Shim_APQ3", "Shim_APQ5", "Shi_APQ11", "hnr05", "hnr15", "hnr25"])

MLP.predict(apred)

file_list = []
localJitter_list = []
localabsoluteJitter_list = []
rapJitter_list = []
ppq5Jitter_list = []
localShimmer_list = []
localdbShimmer_list = []
apq3Shimmer_list = []
aqpq5Shimmer_list = []
apq11Shimmer_list = []
hnr05_list = []
hnr15_list = []
hnr25_list = []
hnr35_list = []
hnr38_list = []
parkinson_list = []

sound = parselmouth.Sound("/content/ID04_pd_2_0_1.wav")
(localJitter, localabsoluteJitter, rapJitter, ppq5Jitter, localShimmer, localdbShimmer, apq3Shimmer, aqpq5Shimmer,
 apq11Shimmer, hnr05, hnr15, hnr25, hnr35, hnr38) = measurePitch(sound, 75, 1000, "Hertz")
localJitter_list.append(localJitter)  # make a mean F0 list
localabsoluteJitter_list.append(localabsoluteJitter)  # make a sd F0 list
rapJitter_list.append(rapJitter)
ppq5Jitter_list.append(ppq5Jitter)
localShimmer_list.append(localShimmer)
localdbShimmer_list.append(localdbShimmer)
apq3Shimmer_list.append(apq3Shimmer)
aqpq5Shimmer_list.append(aqpq5Shimmer)
apq11Shimmer_list.append(apq11Shimmer)
hnr05_list.append(hnr05)
hnr15_list.append(hnr15)
hnr25_list.append(hnr25)
hnr35_list.append(hnr35)
hnr38_list.append(hnr38)

apred = pd.DataFrame(np.column_stack(
    [localJitter_list, localabsoluteJitter_list, rapJitter_list, ppq5Jitter_list, localShimmer_list,
     localdbShimmer_list, apq3Shimmer_list, aqpq5Shimmer_list, apq11Shimmer_list, hnr05_list, hnr15_list, hnr25_list]),
                     columns=["Jitter_rel", "Jitter_abs", "Jitter_RAP", "Jitter_PPQ", "Shim_loc", "Shim_dB",
                              "Shim_APQ3", "Shim_APQ5", "Shi_APQ11", "hnr05", "hnr15", "hnr25"])

MLP.predict(apred)

import joblib

joblib.dump(MLP, "modelMlp.sav")

# from google.colab import files
# files.download('modelMlp2802.sav')
